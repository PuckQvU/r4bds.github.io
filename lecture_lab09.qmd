---
title: "Lecture Lab 9"
author: "Leon Eyrich Jessen"
format:
  revealjs:
    embed-resources: true
    theme: moon
    slide-number: c/t
    width: 1600
    height: 900
    mainfont: avenir
    logo: images/r4bds_logo_small.png
    footer: "R for Bio Data Science"
---

# Creating a Simple Shiny App


<!--# ---------------------------------------------------------------------- -->
<!--# SLIDE ---------------------------------------------------------------- -->
<!--# ---------------------------------------------------------------------- -->
## But... What is Shiny? ...and how does it relate to a package?

_What if you wanted to "share your code" with someone who don't know how to code? ðŸ¤”_

:::: {.columns}

::: {.column width="50%"}

![](images/logo_pkg_down_hex.png){fig-align="center"}

- A package is an ordered and documented collection of functions

:::

::: {.column width="50%"}

![](images/logo_shiny_hex.png){fig-align="center"}

- A Shiny app is an interface on top of an ordered and documented collection of functions

:::

::::


<!--# ---------------------------------------------------------------------- -->
<!--# SLIDE ---------------------------------------------------------------- -->
<!--# ---------------------------------------------------------------------- -->
## General Idea is to...

:::: {.columns}

::: {.column width="50%"}

- Shiny enables writing powerful interactive web apps in R, thereby:
  - Connecting non-data literate people with data
  - Automating time consuming tasks
  - Exhibiting data to relevant stakeholders
  - Generating value by facilitating extraction of insights

:::

::: {.column width="50%"}

<br>
<br>
<br>

![](images/shiny_data_to_action.png)

:::

::::

<!--# ---------------------------------------------------------------------- -->
<!--# SLIDE ---------------------------------------------------------------- -->
<!--# ---------------------------------------------------------------------- -->
## Seeing is believing

- Let us visit [the Posit Shiny Gallery](https://shiny.posit.co/r/gallery/)


<!--# ---------------------------------------------------------------------- -->
<!--# SLIDE ---------------------------------------------------------------- -->
<!--# ---------------------------------------------------------------------- -->
## Hello Shiny!

:::: {.columns}

::: {.column width="50%"}

```{r}
#| echo: true
#| eval: false

# Load the Shiny library
library("shiny")

# Define the User Interface (Frontend)
ui <- fluidPage(
  titlePanel("Hello Shiny!"),
  sidebarLayout(
    sidebarPanel(
      sliderInput(inputId = "bins",
                  label = "Number of bins:",
                  min = 1,
                  max = 50,
                  value = 30)
    ),
    mainPanel(
      plotOutput(outputId = "distPlot")
    )
  )
)

# Define the Server (Backend)
server <- function(input, output) {
  output$distPlot <- renderPlot({
    x <- faithful$waiting
    bins <- seq(min(x), max(x), length.out = input$bins + 1)
    hist(x, breaks = bins, col = "#75AADB", border = "white",
         xlab = "Waiting time to next eruption (in mins)",
         main = "Histogram of waiting times")
  })
}

# Launch the shiny app
shinyApp(ui = ui, server = server)
```

:::

::: {.column width="50%"}

![](images/shiny_hello_shiny_example.png)

:::

::::



<!--# ---------------------------------------------------------------------- -->
<!--# SLIDE ---------------------------------------------------------------- -->
<!--# ---------------------------------------------------------------------- -->
## Hello Shiny!

:::: {.columns}

::: {.column width="50%"}

```{r}
#| echo: true
#| eval: false

# Load the Shiny library
library("shiny")

# Define the User Interface (Frontend)
ui <- fluidPage(
  titlePanel("Hello Shiny!"),
  sidebarLayout(
    sidebarPanel(
      sliderInput(inputId = "bins",
                  label = "Number of bins:",
                  min = 1,
                  max = 50,
                  value = 30)
    ),
    mainPanel(
      plotOutput(outputId = "distPlot")
    )
  )
)

# Define the Server (Backend)
server <- function(input, output) {
  output$distPlot <- renderPlot({
    x <- faithful$waiting
    bins <- seq(min(x), max(x), length.out = input$bins + 1)
    hist(x, breaks = bins, col = "#75AADB", border = "white",
         xlab = "Waiting time to next eruption (in mins)",
         main = "Histogram of waiting times")
  })
}

# Launch the shiny app
shinyApp(ui = ui, server = server)
```

:::

::: {.column width="50%"}

![](images/shiny_01_hello_app_anatomy.png)

:::

::::



<!--# ---------------------------------------------------------------------- -->
<!--# SLIDE ---------------------------------------------------------------- -->
<!--# ---------------------------------------------------------------------- -->
## Hello Shiny!

:::: {.columns}

::: {.column width="50%"}

- Frontend, the user interface
  - This is where the user interacts with your app
  - Chooses arguments to function parameters
  - Choices are "requests"
  

:::

::: {.column width="50%"}

- Backend, the server
  - This is where the computations are made in response to the user's choices
  - Chosen arguments are passed to function parameters, producing an output
  - The output is the "response"

:::

::::

_This frontend-to-backend continuous communication is key!_



<!--# ---------------------------------------------------------------------- -->
<!--# SLIDE ---------------------------------------------------------------- -->
<!--# ---------------------------------------------------------------------- -->
## Hello Shiny!

:::: {.columns}

::: {.column width="50%"}

- Frontend, the user interface
  - This is where the user interacts with your app
  - Chooses arguments to function parameters
  - Choices are "requests"
  

:::

::: {.column width="50%"}

- Backend, the server
  - This is where the computations are made in response to the user's choices
  - Chosen arguments are passed to function parameters, producing an output
  - The output is the "response"

:::

::::

_This frontend-to-backend continuous communication is key!_
